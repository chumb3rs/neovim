### === HELPER FUNCTIONS === ###
global !p
def nl(snip):
	if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "

endglobal
### === HELPER FUNCTIONS === ###


### === BASICS === ###
snippet co "constant" b
public static final ${1:String} ${2:var} = $3;$0
endsnippet

snippet cos "constant string" b
public static final String ${1:var} = "$2";$0
endsnippet

snippet pa "package" b
package $0
endsnippet

snippet p "print" b
System.out.print($1);$0
endsnippet

snippet pl "println"  b
System.out.println($1);$0
endsnippet

snippet po "protected" b
protected $0
endsnippet

snippet pv "private" b
private $0
endsnippet

snippet pb "public" b
public $0
endsnippet

snippet re "return" b
return $0
endsnippet

snippet st "static"
static $0
endsnippet
### === BASICS === ###


### === CLASSES === ###
snippet cls "class" bA
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} {
	$0
}
endsnippet

snippet clc "class and constructor" bA
public class `!p
snip.rv = snip.basename or "untitled"` {

	public `!p snip.rv = snip.basename or "untitled"`($2) {
		$0
	}
}
endsnippet

snippet cst "Constructor for class" bA
public `!p snip.rv = snip.basename or "untitled"`($1) {
	$0
}
endsnippet
### === CLASSES === ###


### === CONDITIONALS === ###
snippet ca "catch" b
catch (${1:Exception} ${2:e})`!p nl(snip)`{
	$0
}
endsnippet

snippet elif "else if"
else if ($1)`!p nl(snip)`{
    $0${VISUAL}
}
endsnippet

snippet el "else" w
else`!p nl(snip)`{
    $0${VISUAL}
}
endsnippet

snippet if "if" b
if ($1)`!p nl(snip)`{
	$0${VISUAL}
}
endsnippet
### === CONDITIONALS === ###

### === FUNCTIONS === ###
snippet "fn(\S+)" "public <type> functionName" rb
public `!p snip.rv = match.group(1)` $1() {
    $0
}
endsnippet

snippet try "try/catch" b
try {
	$1${VISUAL}
} catch(${2:Exception} ${3:e}){
	${4:e.printStackTrace();}
}
endsnippet
### === FUNCTIONS === ###


### === LOOPS === ###
snippet for "for" b
for ($1; $2; $3)`!p nl(snip)`{
	$0
}
endsnippet

snippet fore "for (each)" b
for ($1 : $2)`!p nl(snip)`{
	$0
}
endsnippet

snippet fori "for" b
for (int ${1:i} = 0; $1 < ${2:10}; $1++)`!p nl(snip)`{
	$0
}
endsnippet

snippet wh "while" b
while ($1)`!p nl(snip)`{
	$0
}
endsnippet
### === LOOPS === ###
